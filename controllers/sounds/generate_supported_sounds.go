// +build ignore

// This program generates supported_sounds.go. It can be invoked by running
package main

import (
	"io/ioutil"
	"os"
	"strings"
	"text/template"
	"time"

	log "github.com/sirupsen/logrus"
)

const soundsDirectory = "../../sounds"
const soundFileSuffix = ".mp3"
const generatedSoundsFile = "./supported_sounds.go"

// getSupportedColors returns a slice of supported sounds sourced from the sounds directory
func getSupportedSounds() []string {
	supportedSounds := []string{}
	files, err := ioutil.ReadDir(soundsDirectory)
	if err != nil {
		log.Error(err)
	}
	for _, file := range files {
		if strings.HasSuffix(file.Name(), soundFileSuffix) {
			// dracula.mp3 => dracula
			supportedSounds = append(supportedSounds, strings.TrimSuffix(file.Name(), soundFileSuffix))
		}
	}
	return supportedSounds
}

func main() {
	f, err := os.Create(generatedSoundsFile)
	if err != nil {
		log.Error(err)
	}
	defer f.Close()

	supportedSoundsTemplate.Execute(f, struct {
		Timestamp       time.Time
		SupportedSounds []string
	}{
		Timestamp:       time.Now(),
		SupportedSounds: getSupportedSounds(),
	})
}

var supportedSoundsTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}

package sounds

// SupportedSounds is a slice of available mp3's in the sounds directory
var SupportedSounds = []string{
{{- range .SupportedSounds }}
	{{ printf "%q" . }},
{{- end }}
}
`))
